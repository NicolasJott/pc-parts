openapi: 3.0.0
info:
  title: 'PC Parts'
  description: "## Introduction\n\n API documentation for PC Parts - REST API starter kit powered by Laravel, OpenAPI, Sanctum.\n\n- [GitHub](https://github.com/NicolasJott/pc-parts)"
  version: 1.0.0
servers:
  -
    url: 'http://127.0.0.1:8000'
    description: 'Local API server'
paths:
  /api/admin/login:
    post:
      tags:
        - adminAuth
      summary: 'Login an admin'
      description: 'Login an admin.'
      operationId: Admin.AuthController.login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminLoginRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoggedInAdminResource'
        '422':
          description: 'Unprocessable entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Invalid credentials.' }
                type: object
  /api/admin/logout:
    post:
      tags:
        - adminAuth
      summary: 'Logout an admin'
      description: 'Logout an admin.'
      operationId: Admin.AuthController.logout
      responses:
        '204':
          description: 'No content'
      security:
        -
          BearerToken: []
  /api/admin/profile:
    get:
      tags:
        - adminProfile
      summary: me
      description: 'Get the authenticated admin.'
      operationId: Admin.ProfileController.me
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminResource'
      security:
        -
          BearerToken: []
  /api/signup:
    post:
      tags:
        - auth
      summary: 'Signup a user'
      description: 'Signup a user.'
      operationId: AuthController.signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoggedInUserResource'
        '422':
          description: 'Unprocessable entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /api/login:
    post:
      tags:
        - auth
      summary: 'Login a user'
      description: 'Login a user.'
      operationId: AuthController.login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoggedInUserResource'
        '422':
          description: 'Unprocessable entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Invalid credentials.' }
                type: object
  /api/logout:
    post:
      tags:
        - auth
      summary: 'Logout a user'
      description: 'Logout a user.'
      operationId: AuthController.logout
      responses:
        '204':
          description: 'No content'
      security:
        -
          BearerToken: []
  /api/orders:
    get:
      tags:
        - orders
      summary: 'Read all orders'
      description: 'Read all Orders.'
      operationId: OrderController.readAll
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResourceCollection'
      security:
        -
          BearerToken: []
    post:
      tags:
        - orders
      summary: 'Create order'
      description: 'Create an Order.'
      operationId: OrderController.create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResource'
      security:
        -
          BearerToken: []
  '/api/orders/{id}':
    get:
      tags:
        - orders
      summary: 'Read single order'
      description: 'Read an Order'
      operationId: OrderController.read
      parameters:
        -
          name: id
          in: path
          required: true
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResource'
      security:
        -
          BearerToken: []
    put:
      tags:
        - orders
      summary: 'Update single order'
      description: 'Update an Order.'
      operationId: OrderController.update
      parameters:
        -
          name: id
          in: path
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResource'
      security:
        -
          BearerToken: []
    delete:
      tags:
        - orders
      summary: 'Delete single order'
      description: 'Delete an order.'
      operationId: OrderController.delete
      parameters:
        -
          name: id
          in: path
          required: true
      responses:
        '204':
          description: 'No content'
      security:
        -
          BearerToken: []
  /api/products:
    get:
      tags:
        - products
      summary: 'Read all products'
      operationId: ProductController.readAll
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResourceCollection'
      security:
        -
          BearerToken: []
  '/api/products/{category}':
    get:
      tags:
        - products
      summary: 'Read products by category'
      description: 'Read by category'
      operationId: ProductController.readByCategory
      parameters:
        -
          name: category
          in: path
          required: true
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResourceCollection'
      security:
        -
          BearerToken: []
  /api/profile:
    get:
      tags:
        - profile
      summary: me
      description: 'Get the authenticated user.'
      operationId: ProfileController.me
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResource'
      security:
        -
          BearerToken: []
    delete:
      tags:
        - profile
      summary: 'delete current user'
      description: 'Delete the authenticated user.'
      operationId: ProfileController.delete
      responses:
        '204':
          description: 'No content'
      security:
        -
          BearerToken: []
  /api/profile/orders:
    get:
      tags:
        - profile
      summary: 'my orders'
      description: "Get the authenticated user's orders."
      operationId: ProfileController.myOrders
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResourceCollection'
      security:
        -
          BearerToken: []
components:
  schemas:
    ValidationError:
      properties:
        message:
          type: string
          example: 'The given data was invalid.'
        errors:
          properties:
            'key 1':
              type: array
              items:
                type: string
                example: 'Error message 1'
            'key 2':
              type: array
              items:
                type: string
                example: 'Error message 2'
          type: object
      type: object
    AdminLoginRequest:
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: root@admin.com
        password:
          type: string
          example: '123456'
      type: object
    LoginRequest:
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: john@example.com
        password:
          type: string
          example: '123456'
      type: object
    SignupRequest:
      required:
        - name
        - email
        - password
        - password_confirmation
      properties:
        name:
          type: string
          example: 'John Doe'
        email:
          type: string
          format: email
          example: john@example.com
        password:
          type: string
          example: '123456'
        password_confirmation:
          type: string
          example: '123456'
      type: object
    CreateOrderRequest:
      required:
        - firstName
        - lastName
        - email
        - phoneNumber
        - deliveryAddress
        - products
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          format: email
          example: user@example.com
        phoneNumber:
          type: string
          example: 123-456-7890
        products:
          type: array
          items:
            properties:
              id:
                type: integer
                example: 1
              quantity:
                type: integer
                example: 1
            type: object
        deliveryAddress:
          properties:
            address1:
              type: string
              example: '123 Easy Street'
            address2:
              type: string
              example: 'Apt. 309'
            city:
              type: string
              example: Youngstown
            state:
              type: string
              example: OH
            zipCode:
              type: integer
              example: 123456
          type: object
      type: object
    AccessTokenResource:
      properties:
        access_token:
          type: string
          example: 6|JeXDJdhmaQN4Nl3T3DaD9sE20PoPrdUx15W0m2eA
        type:
          type: string
          example: bearer
      type: object
    AdminResource:
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Admin
        email:
          type: string
          example: root@admin.com
        avatar_url:
          type: string
          example: 'https://someplace.com/avatar'
          nullable: true
        created_at:
          type: string
          format: date-time
          example: '2022-08-27T16:14:46.000000Z'
      type: object
    DeliveryAddressResource:
      properties:
        id:
          type: integer
          example: 1
        order_id:
          type: integer
          example: 1
        address1:
          type: string
          example: '123 Easy Street'
        address2:
          type: string
          example: 'Apt. 309'
        city:
          type: string
          example: Youngstown
        state:
          type: string
          example: OH
        zipCode:
          type: integer
          example: 123456
      type: object
    LineItemResource:
      properties:
        id:
          type: integer
          example: 1
        quantity:
          type: integer
          example: 1
        price:
          type: number
          example: 100
        product:
          $ref: '#/components/schemas/ProductResource'
      type: object
    LineItemResourceCollection:
      type: array
      items:
        $ref: '#/components/schemas/LineItemResource'
    LoggedInAdminResource:
      properties:
        admin:
          $ref: '#/components/schemas/AdminResource'
        token:
          $ref: '#/components/schemas/AccessTokenResource'
      type: object
    LoggedInUserResource:
      properties:
        user:
          $ref: '#/components/schemas/UserResource'
        token:
          $ref: '#/components/schemas/AccessTokenResource'
      type: object
    OrderResource:
      properties:
        id:
          type: integer
          example: 1
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: john@example.com
        phoneNumber:
          type: string
          example: 123-456-7890
        created_at:
          type: string
          format: date-time
          example: '2022-08-27T16:14:46.000000Z'
        deliveryAddress:
          $ref: '#/components/schemas/DeliveryAddressResource'
        lineItems:
          $ref: '#/components/schemas/LineItemResourceCollection'
      type: object
    OrderResourceCollection:
      type: array
      items:
        $ref: '#/components/schemas/OrderResource'
    ProductResource:
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'AMD - Ryzen 7 7800X3D 8-Core - 16-Thread 4.2 GHz (5.0 GHz Max Boost) Socket AM5 Unlocked Desktop Processor - Black'
        model:
          type: string
          example: 100-100000910WOF
        price:
          type: string
          example: $369.00
        category:
          type: string
          example: CPU
        product_image:
          type: string
          example: 'https://pisces.bbystatic.com/image2/BestBuy_US/images/products/6537/6537139cv11d.jpg;maxHeight=200;maxWidth=300'
        description:
          type: string
          example: "AMD Ryzen 7 7800X3D The dominant gaming processor with AMD 3D V-Cache technology for even more game performance.  Whatever the setting, whatever the resolution, lead your team to victory with this incredible gaming processor.  Plus, enjoy the benefits of next-gen AMD 3D V-Cache technology for lower latency and even more game performance.\_"
        specifications:
          type: array
          example:
            - 'Socket AM5 (LGA 1718)'
            - '4.2 gigahertz'
            - '5 gigahertz'
            - 8-core
            - '16'
            - 'Yes'
      type: object
    ProductResourceCollection:
      type: array
      items:
        $ref: '#/components/schemas/ProductResource'
    UserResource:
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'John Doe'
        email:
          type: string
          example: john@example.com
        created_at:
          type: string
          format: date-time
          example: '2022-08-27T16:14:46.000000Z'
      type: object
  securitySchemes:
    BearerToken:
      type: http
      bearerFormat: JWT
      scheme: bearer
tags:
  -
    name: auth
    description: 'User authentication'
  -
    name: adminAuth
    description: 'Admin authentication'
  -
    name: profile
    description: 'User profile'
  -
    name: adminProfile
    description: 'Admin profile'
